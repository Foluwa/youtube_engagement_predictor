version: "3.8"

services:
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    ports: ["80:80"]
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - DEBUG=false
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  streamlit:
    build: 
      context: .
      dockerfile: Dockerfile.streamlit
    ports: ["8501:8501"]
    restart: unless-stopped
    depends_on:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  airflow-webserver:
    image: apache/airflow:latest
    command: api-server
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=False
    depends_on:
      postgres:
        condition: service_healthy
    ports: ["8080:8080"]
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    deploy:
      resources:
        limits:
          cpus: '0.7'
          memory: 768M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  airflow-scheduler:
    image: apache/airflow:latest
    command: scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./dags:/opt/airflow/dags
      - ./logs:/opt/airflow/logs
      - ./plugins:/opt/airflow/plugins
    deploy:
      resources:
        limits:
          cpus: '0.7'
          memory: 768M
    restart: unless-stopped

  postgres:
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped

  redis:
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 30s
      retries: 3
      start_period: 10s

  mlflow:
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    restart: unless-stopped